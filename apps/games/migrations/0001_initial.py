# Generated by Django 4.2.7 on 2025-07-31 11:43

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('game_completion', 'Game Completion'), ('personality_insight', 'Personality Insight'), ('engagement', 'Engagement'), ('streak', 'Activity Streak'), ('milestone', 'Milestone'), ('social', 'Social Achievement')], max_length=20)),
                ('criteria', models.JSONField(default=dict)),
                ('icon', models.CharField(default='üèÜ', max_length=50)),
                ('points', models.PositiveIntegerField(default=10)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameScenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('scenario_type', models.CharField(choices=[('moral_dilemma', 'Moral Dilemma'), ('life_choice', 'Life Choice'), ('social_situation', 'Social Situation'), ('work_scenario', 'Work Scenario'), ('relationship', 'Relationship'), ('ethical_choice', 'Ethical Choice')], max_length=20)),
                ('difficulty', models.PositiveSmallIntegerField(choices=[(1, 'Very Easy'), (2, 'Easy'), (3, 'Medium'), (4, 'Hard'), (5, 'Very Hard')], default=3)),
                ('description', models.TextField()),
                ('background_story', models.TextField()),
                ('choices', models.JSONField(default=list)),
                ('outcomes', models.JSONField(default=dict)),
                ('trait_weights', models.JSONField(default=dict)),
                ('times_used', models.PositiveIntegerField(default=0)),
                ('average_rating', models.FloatField(default=0.0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('personality', 'Personality Assessment'), ('rpg', 'Role-Playing Game'), ('dilemma', 'Moral Dilemma'), ('scenario', 'Life Scenario'), ('creative', 'Creative Exercise'), ('memory', 'Memory Game'), ('logic', 'Logic Puzzle')], max_length=20)),
                ('description', models.TextField()),
                ('instructions', models.TextField()),
                ('assesses_openness', models.BooleanField(default=False)),
                ('assesses_conscientiousness', models.BooleanField(default=False)),
                ('assesses_extraversion', models.BooleanField(default=False)),
                ('assesses_agreeableness', models.BooleanField(default=False)),
                ('assesses_neuroticism', models.BooleanField(default=False)),
                ('estimated_duration_minutes', models.PositiveIntegerField(default=5)),
                ('difficulty_level', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('game_data', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('started', 'Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('abandoned', 'Abandoned'), ('paused', 'Paused')], default='started', max_length=15)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('current_step', models.PositiveIntegerField(default=0)),
                ('total_steps', models.PositiveIntegerField(default=1)),
                ('game_state', models.JSONField(default=dict)),
                ('responses', models.JSONField(default=list)),
                ('personality_scores', models.JSONField(default=dict)),
                ('engagement_score', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('user_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('enjoyed_game', models.BooleanField(blank=True, null=True)),
                ('game_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='games.gametype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='GameResponse',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('question_id', models.CharField(max_length=50)),
                ('question_text', models.TextField()),
                ('response_type', models.CharField(choices=[('choice', 'Multiple Choice'), ('text', 'Text Response'), ('rating', 'Rating Scale'), ('ranking', 'Ranking'), ('boolean', 'Yes/No')], max_length=10)),
                ('response_value', models.TextField()),
                ('response_time_seconds', models.PositiveIntegerField()),
                ('personality_impact', models.JSONField(default=dict)),
                ('confidence_level', models.FloatField(default=0.5, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_details', to='games.gamesession')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True)),
                ('trigger_context', models.JSONField(blank=True, default=dict)),
                ('is_seen', models.BooleanField(default=False)),
                ('is_celebrated', models.BooleanField(default=False)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
