-- Complete User Memories Table with Enhanced Features
-- Creates the user_memories table and adds enhanced metadata columns
-- Create the base user_memories table if it doesn't exist
CREATE TABLE IF NOT EXISTS user_memories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    key TEXT NOT NULL,
    value TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
-- Add enhanced metadata columns for better memory management
ALTER TABLE user_memories
ADD COLUMN IF NOT EXISTS importance TEXT CHECK (importance IN ('high', 'medium', 'low')) DEFAULT 'low',
    ADD COLUMN IF NOT EXISTS category TEXT DEFAULT 'general',
    ADD COLUMN IF NOT EXISTS metadata JSONB DEFAULT '{}'::jsonb;
-- Add unique constraint to prevent duplicate memories per user
-- Check if constraint exists first, then add if it doesn't
DO $$ BEGIN IF NOT EXISTS (
    SELECT 1
    FROM pg_constraint
    WHERE conname = 'unique_user_memory_key'
) THEN
ALTER TABLE user_memories
ADD CONSTRAINT unique_user_memory_key UNIQUE (user_id, key);
END IF;
END $$;
-- Add trigger function to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = NOW();
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
-- Create trigger for automatic updated_at updates
DROP TRIGGER IF EXISTS update_user_memories_updated_at ON user_memories;
CREATE TRIGGER update_user_memories_updated_at BEFORE
UPDATE ON user_memories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- Create indexes for efficient querying
CREATE INDEX IF NOT EXISTS idx_user_memories_user_id ON user_memories(user_id);
CREATE INDEX IF NOT EXISTS idx_user_memories_key ON user_memories(key);
CREATE INDEX IF NOT EXISTS idx_user_memories_importance ON user_memories(importance);
CREATE INDEX IF NOT EXISTS idx_user_memories_category ON user_memories(category);
CREATE INDEX IF NOT EXISTS idx_user_memories_updated_at ON user_memories(updated_at);
-- Add compound index for efficient session initialization queries
CREATE INDEX IF NOT EXISTS idx_user_memories_user_importance_updated ON user_memories(user_id, importance, updated_at DESC);
-- Enable Row Level Security
ALTER TABLE user_memories ENABLE ROW LEVEL SECURITY;
-- Drop existing policies if they exist
DROP POLICY IF EXISTS "Users can view their own memories" ON user_memories;
DROP POLICY IF EXISTS "Users can insert their own memories" ON user_memories;
DROP POLICY IF EXISTS "Users can update their own memories" ON user_memories;
DROP POLICY IF EXISTS "Users can delete their own memories" ON user_memories;
-- Create comprehensive RLS policies
CREATE POLICY "Users can view their own memories" ON user_memories FOR
SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own memories" ON user_memories FOR
INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own memories" ON user_memories FOR
UPDATE USING (auth.uid() = user_id) WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can delete their own memories" ON user_memories FOR DELETE USING (auth.uid() = user_id);
-- Update existing memories to have appropriate importance based on key patterns
-- This is a one-time update for existing data
UPDATE user_memories
SET importance = 'high'
WHERE importance = 'low'
    AND (
        key ILIKE '%character%'
        OR key ILIKE '%occupation%'
        OR key ILIKE '%age%'
        OR key ILIKE '%relationship%'
        OR key ILIKE '%favorite_anime%'
        OR key ILIKE '%favorite_game%'
        OR key = 'personal_info'
    );
UPDATE user_memories
SET importance = 'medium'
WHERE importance = 'low'
    AND (
        key ILIKE 'favorite_%'
        OR key ILIKE 'hobby_%'
        OR key ILIKE '%goal%'
    );
-- Update categories based on key patterns
UPDATE user_memories
SET category = 'personal_fact'
WHERE key IN ('occupation', 'age', 'personal_info');
UPDATE user_memories
SET category = 'character_reference'
WHERE key ILIKE '%character%';
UPDATE user_memories
SET category = 'favorite'
WHERE key ILIKE 'favorite_%';
UPDATE user_memories
SET category = 'hobby_interest'
WHERE key ILIKE 'hobby_%';
UPDATE user_memories
SET category = 'relationship'
WHERE key ILIKE 'relationship_%';
UPDATE user_memories
SET category = 'goal_aspiration'
WHERE key ILIKE '%goal%';
-- Add table and column comments for documentation
COMMENT ON TABLE user_memories IS 'Stores key-value pairs of memories for each user, allowing the AI to recall past information across sessions.';
COMMENT ON COLUMN user_memories.user_id IS 'The user this memory belongs to.';
COMMENT ON COLUMN user_memories.key IS 'The category or topic of the memory (e.g., favorite_anime, favorite_character).';
COMMENT ON COLUMN user_memories.value IS 'The content of the memory (e.g., Re:Zero, Natsuki Subaru).';
COMMENT ON COLUMN user_memories.importance IS 'Priority level for memory retrieval: high (always loaded), medium (frequently loaded), low (rarely loaded)';
COMMENT ON COLUMN user_memories.category IS 'Category of memory for organization and filtering';
COMMENT ON COLUMN user_memories.metadata IS 'Additional metadata in JSON format (timestamps, source, etc.)';
-- Grant appropriate permissions
GRANT SELECT,
    INSERT,
    UPDATE,
    DELETE ON user_memories TO authenticated;
GRANT USAGE ON SEQUENCE user_memories_id_seq TO authenticated;