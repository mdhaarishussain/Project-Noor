-- Create a table to store user-specific memories
CREATE TABLE user_memories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    key TEXT NOT NULL,
    value TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
-- Add a trigger to automatically update the updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column() RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = NOW();
RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER update_user_memories_updated_at BEFORE
UPDATE ON user_memories FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- Add indexes for faster queries
CREATE INDEX idx_user_memories_user_id ON user_memories(user_id);
CREATE INDEX idx_user_memories_key ON user_memories(key);
-- Enable Row Level Security
ALTER TABLE user_memories ENABLE ROW LEVEL SECURITY;
-- Create policies for RLS
CREATE POLICY "Users can view their own memories" ON user_memories FOR
SELECT USING (auth.uid() = user_id);
CREATE POLICY "Users can insert their own memories" ON user_memories FOR
INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Users can update their own memories" ON user_memories FOR
UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Users can delete their own memories" ON user_memories FOR DELETE USING (auth.uid() = user_id);
COMMENT ON TABLE public.user_memories IS 'Stores key-value pairs of memories for each user, allowing the AI to recall past information.';
COMMENT ON COLUMN public.user_memories.user_id IS 'The user this memory belongs to.';
COMMENT ON COLUMN public.user_memories.key IS 'The category or topic of the memory (e.g., favorite_anime).';
COMMENT ON COLUMN public.user_memories.value IS 'The content of the memory (e.g., Re:Zero).';